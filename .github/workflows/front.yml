name: FrontPipe

on:
  push:
    branches:
      - terraform
  pull_request:
    branches:
      - terraform

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - name: Install dependencies
  #       run: |
  #         cd webapp
  #         npm install -g yarn
  #         yarn install

  #     - name: Validate ESlint
  #       run: |
  #         cd webapp
  #         yarn lint:fix

  #     - name: Build
  #       run: |
  #         cd webapp
  #         yarn build

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2

  #     - name: Auth AWS
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY }}
  #         aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}

  #     - name: Auth Docker client
  #       run: aws ecr get-login-password --region us-east-1 | docker login --username ${{ secrets.AWS_USER }} --password-stdin ${{ secrets.AWS_REGISTRY }}

  #     - name: Build Docker image
  #       run: docker build -t avt-webapp ./webapp

  #     - name: Version Docker image
  #       run: docker tag avt-webapp:latest ${{ secrets.AWS_REGISTRY }}:latest

  #     - name: Push Docker image to AWS
  #       run: |
  #         docker push ${{ secrets.AWS_REGISTRY }}:latest

  terraform:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Setup SSH
        working-directory: ./
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa.pem
          chmod 600 ~/.ssh/id_rsa.pem

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Terraform Init
        run: terraform init
        working-directory: ./

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./

      - name: Get Terraform Output
        id: terraform_output
        run: |
          INSTANCE_IP=$(terraform output -raw public_ip)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "[avt]" > inventario
          echo "$INSTANCE_IP ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa.pem" >> inventario
          cat inventario
          ansible-playbook -i inventario playbook.yml
        shell: bash

      # - name: Set outputs
      #   run: echo "ECR_URL=$(terraform output -raw ecr_url)" | tee -a $GITHUB_ENV

  # destroy:
  #   needs: terraform
  #   runs-on: ubuntu-latest
  #   if: failure() # Executar apenas se a etapa deploy falhar
  #   steps:
  #     - name: Set up Terraform for Destroy
  #       uses: hashicorp/setup-terraform@v1

  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve
