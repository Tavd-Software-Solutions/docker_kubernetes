name: FrontPipe

on:
  push:
    branches:
      - terraform
  pull_request:
    branches:
      - terraform

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
      - name: Set outputs
        run: echo "ECR_URL=$(terraform output -raw ecr_url)" >> $GITHUB_ENV

  build:
    needs: terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd webapp
          npm install -g yarn
          yarn install

      - name: Validate ESlint
        run: |
          cd webapp
          yarn lint:fix

      - name: Build
        run: |
          cd webapp
          yarn build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2

      - name: Auth AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Auth Docker client
        run: aws ecr get-login-password --region us-east-1 | docker login --username ${{ secrets.AWS_USER }} --password-stdin ${{ env.ECR_URL }}

      - name: Build Docker image
        run: docker build -t avt-webapp ./webapp

      - name: Version Docker image
        run: docker tag avt-webapp:latest ${{ env.ECR_URL }}:latest

      - name: Push Docker image to AWS
        run: |
          docker push ${{ env.ECR_URL }}:latest

      - name: Ansible
        run: ansible-playbook playbook.yml
        env:
          AWS_REGION: us-east-1
          ECR_URL: ${{ env.ECR_URL }}
  destroy:
    needs: terraform
    runs-on: ubuntu-latest
    if: failure() # Executar apenas se a etapa deploy falhar
    steps:
      - name: Set up Terraform for Destroy
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
